---
import type { WeatherData } from "../pages/api/weather";
import WeatherEntry from "./WeatherEntry.astro";
import { isThePast, sortByDates } from "../utils/date-utils";
import { WeatherEntryClient } from "./WeatherEntryClient";
import WeatherEntryBody from "./WeatherEntryBody.astro";
import { getDateTimeDescriptive } from "../utils/date-utils";
import { getTime } from "../utils/date-utils";
import { getDateDescriptive } from "../utils/date-utils";
import WeatherDisplaySection from "./WeatherDisplaySection.astro";
import { WeatherDisplaySectionClient } from "./WeatherDisplaySectionClient";

interface WeatherEntryData {
  time: string;
  dateTime: string;
  temperature: number;
  precipitation: number;
  description: string;
  symbol: string;
  timezone: string;
}

interface WeatherSectionData {
  date: string;
  entries: WeatherEntryData[];
}

const data = Astro.props as { weatherData: WeatherData };
const weatherTableData = (): WeatherSectionData[] => {
  const {
    weatherData: {
      timezone,
      hourly: { temperature, time, weatherCodes: weatherCode, precipitation },
    },
  } = data;

  let sections: Map<string, WeatherSectionData> = new Map();

  // Is supposed to be array, but API I'm using is stupid
  const tempLength = Array.isArray(temperature)
    ? temperature.length
    : Object.values(temperature).length;

  for (let i = 0; i < tempLength; i++) {
    let { description, symbol } = weatherCode[i];

    const entry = {
      time: getTime(new Date(time[i]).toString(), timezone)!,
      dateTime: new Date(time[i]).toISOString(),
      temperature: Math.floor(Number(temperature[i]))!,
      precipitation: precipitation[i]!,
      description: description!,
      symbol: symbol!,
      timezone: timezone!,
    };

    const date = getDateDescriptive(time[i]);

    if (sections.has(date)) {
      sections.get(date)?.entries.push(entry);
    } else {
      sections.set(date, {
        date,
        entries: [entry],
      });
    }
  }

  for (const [key, value] of sections) {
    sections.set(key, {
      ...value,

      entries: sortByDates(value.entries, (x) => x.time).filter(
        ({ dateTime }) => !isThePast(dateTime)
      ),
    });
  }

  return Array.from(sections.values()).sort((valueA, valueB) => {
    return new Date(valueA.date).getTime() - new Date(valueB.date).getTime();
  });
};
---

<div class="flex flex-col pt-5">
  {
    weatherTableData().map((item) => (
      <div class="flex flex-col w-full items-center">
        <div class="pt-4 w-full flex flex-wrap flex-col">
          <WeatherDisplaySectionClient date={item.date} client:only="solid-js">
            {item.entries.map((entry) => (
              <div class="flex flex-col w-full items-center">
                <WeatherEntryBody
                  time={entry.time}
                  temperature={entry.temperature}
                  precipitation={entry.precipitation}
                  description={entry.description}
                  symbol={entry.symbol}
                  timezone={entry.timezone}
                />
              </div>
            ))}
            <WeatherDisplaySection slot="fallback" date={item.date}>
              {item.entries.map((entry) => (
                <div class="flex flex-col w-full items-center">
                  <WeatherEntry
                    time={entry.time}
                    temperature={entry.temperature}
                    precipitation={entry.precipitation}
                    description={entry.description}
                    symbol={entry.symbol}
                    timezone={entry.timezone}
                  />
                </div>
              ))}
            </WeatherDisplaySection>
          </WeatherDisplaySectionClient>

          {/* <WeatherEntryClient client:only="solid-js">
            <WeatherEntryBody
              time={item.time}
              temperature={item[1]}
              precipitation={item[2]}
              description={item[3]}
              symbol={item[4]}
              timezone={item[5]}
            />
            <WeatherEntry
              slot="fallback"
              time={item[0]}
              temperature={item[1]}
              precipitation={item[2]}
              description={item[3]}
              symbol={item[4]}
              timezone={item[5]}
            />
          </WeatherEntryClient> */}
        </div>
      </div>
    ))
  }
</div>
